{"ast":null,"code":"var props = [\"bottom\", \"height\", \"left\", \"right\", \"top\", \"width\"];\n\nvar rectChanged = function rectChanged(a, b) {\n  if (a === void 0) {\n    a = {};\n  }\n\n  if (b === void 0) {\n    b = {};\n  }\n\n  return props.some(function (prop) {\n    return a[prop] !== b[prop];\n  });\n};\n\nvar observedNodes = /*#__PURE__*/new Map();\nvar rafId;\n\nvar run = function run() {\n  var changedStates = [];\n  observedNodes.forEach(function (state, node) {\n    var newRect = node.getBoundingClientRect();\n\n    if (rectChanged(newRect, state.rect)) {\n      state.rect = newRect;\n      changedStates.push(state);\n    }\n  });\n  changedStates.forEach(function (state) {\n    state.callbacks.forEach(function (cb) {\n      return cb(state.rect);\n    });\n  });\n  rafId = window.requestAnimationFrame(run);\n};\n\nfunction observeRect(node, cb) {\n  return {\n    observe: function observe() {\n      var wasEmpty = observedNodes.size === 0;\n\n      if (observedNodes.has(node)) {\n        observedNodes.get(node).callbacks.push(cb);\n      } else {\n        observedNodes.set(node, {\n          rect: undefined,\n          hasRectChanged: false,\n          callbacks: [cb]\n        });\n      }\n\n      if (wasEmpty) run();\n    },\n    unobserve: function unobserve() {\n      var state = observedNodes.get(node);\n\n      if (state) {\n        // Remove the callback\n        var index = state.callbacks.indexOf(cb);\n        if (index >= 0) state.callbacks.splice(index, 1); // Remove the node reference\n\n        if (!state.callbacks.length) observedNodes[\"delete\"](node); // Stop the loop\n\n        if (!observedNodes.size) cancelAnimationFrame(rafId);\n      }\n    }\n  };\n}\n\nexport default observeRect;","map":{"version":3,"mappings":"AAAA,IAAIA,KAAK,GAAsB,CAC9B,QAD8B,EAE9B,QAF8B,EAG9B,MAH8B,EAI9B,OAJ8B,EAK9B,KAL8B,EAM9B,OAN8B,CAA/B;;AASA,IAAIC,WAAW,GAAG,SAAdA,WAAc,CAACC,CAAD,EAA6BC,CAA7B;AAAA,MAACD,CAAD;AAACA,KAAD,GAAc,EAAbA;AAAD;;AAAA,MAA6BC,CAA7B;AAA6BA,KAA7B,GAA0C,EAAbA;AAA7B;;AAAA,SACjBH,KAAK,CAACI,IAANJ,CAAW,UAACK,IAAD;AAAA,WAAUH,CAAC,CAACG,IAAD,CAADH,KAAYC,CAAC,CAACE,IAAD,CAAvB;AAAX,IADiB;AAAlB;;AAGA,IAAIC,aAAa,gBAAG,IAAIC,GAAJ,EAApB;AACA,IAAIC,KAAJ;;AAEA,IAAIC,GAAG,GAAG,SAANA,GAAM;AACT,MAAMC,aAAa,GAAgB,EAAnC;AACAJ,eAAa,CAACK,OAAdL,CAAsB,UAACM,KAAD,EAAQC,IAAR;AACrB,QAAIC,OAAO,GAAGD,IAAI,CAACE,qBAALF,EAAd;;AACA,QAAIZ,WAAW,CAACa,OAAD,EAAUF,KAAK,CAACI,IAAhB,CAAf,EAAsC;AACrCJ,WAAK,CAACI,IAANJ,GAAaE,OAAbF;AACAF,mBAAa,CAACO,IAAdP,CAAmBE,KAAnBF;AACA;AALF;AAQAA,eAAa,CAACC,OAAdD,CAAsB,UAACE,KAAD;AACrBA,SAAK,CAACM,SAANN,CAAgBD,OAAhBC,CAAwB,UAACO,EAAD;AAAA,aAAQA,EAAE,CAACP,KAAK,CAACI,IAAP,CAAV;AAAxB;AADD;AAIAR,OAAK,GAAGY,MAAM,CAACC,qBAAPD,CAA6BX,GAA7BW,CAARZ;AAdD;;SAiBwBc,YACvBT,MACAM;AAEA,SAAO;AACNI,WADM;AAEL,UAAIC,QAAQ,GAAGlB,aAAa,CAACmB,IAAdnB,KAAuB,CAAtC;;AACA,UAAIA,aAAa,CAACoB,GAAdpB,CAAkBO,IAAlBP,CAAJ,EAA6B;AAC5BA,qBAAa,CAACqB,GAAdrB,CAAkBO,IAAlBP,EAAyBY,SAAzBZ,CAAmCW,IAAnCX,CAAwCa,EAAxCb;AADD,aAEO;AACNA,qBAAa,CAACsB,GAAdtB,CAAkBO,IAAlBP,EAAwB;AACvBU,cAAI,EAAEa,SADiB;AAEvBC,wBAAc,EAAE,KAFO;AAGvBZ,mBAAS,EAAE,CAACC,EAAD;AAHY,SAAxBb;AAKA;;AACD,UAAIkB,QAAJ,EAAcf,GAAG;AAZZ;AAeNsB,aAfM;AAgBL,UAAInB,KAAK,GAAGN,aAAa,CAACqB,GAAdrB,CAAkBO,IAAlBP,CAAZ;;AACA,UAAIM,KAAJ,EAAW;AACV;AACA,YAAMoB,KAAK,GAAGpB,KAAK,CAACM,SAANN,CAAgBqB,OAAhBrB,CAAwBO,EAAxBP,CAAd;AACA,YAAIoB,KAAK,IAAI,CAAb,EAAgBpB,KAAK,CAACM,SAANN,CAAgBsB,MAAhBtB,CAAuBoB,KAAvBpB,EAA8B,CAA9BA,EAHN;;AAMV,YAAI,CAACA,KAAK,CAACM,SAANN,CAAgBuB,MAArB,EAA6B7B,aAAa,UAAbA,CAAqBO,IAArBP,EANnB;;AASV,YAAI,CAACA,aAAa,CAACmB,IAAnB,EAAyBW,oBAAoB,CAAC5B,KAAD,CAApB4B;AACzB;AACD;AA5BK,GAAP;AA8BA","names":["props","rectChanged","a","b","some","prop","observedNodes","Map","rafId","run","changedStates","forEach","state","node","newRect","getBoundingClientRect","rect","push","callbacks","cb","window","requestAnimationFrame","observeRect","observe","wasEmpty","size","has","get","set","undefined","hasRectChanged","unobserve","index","indexOf","splice","length","cancelAnimationFrame"],"sources":["/Users/gunner/Documents/GitHub/commutr-main/commutr/frontend/node_modules/@reach/observe-rect/src/index.ts"],"sourcesContent":["let props: (keyof DOMRect)[] = [\n\t\"bottom\",\n\t\"height\",\n\t\"left\",\n\t\"right\",\n\t\"top\",\n\t\"width\",\n];\n\nlet rectChanged = (a: DOMRect = {} as DOMRect, b: DOMRect = {} as DOMRect) =>\n\tprops.some((prop) => a[prop] !== b[prop]);\n\nlet observedNodes = new Map<Element, RectProps>();\nlet rafId: number;\n\nlet run = () => {\n\tconst changedStates: RectProps[] = [];\n\tobservedNodes.forEach((state, node) => {\n\t\tlet newRect = node.getBoundingClientRect();\n\t\tif (rectChanged(newRect, state.rect)) {\n\t\t\tstate.rect = newRect;\n\t\t\tchangedStates.push(state);\n\t\t}\n\t});\n\n\tchangedStates.forEach((state) => {\n\t\tstate.callbacks.forEach((cb) => cb(state.rect));\n\t});\n\n\trafId = window.requestAnimationFrame(run);\n};\n\nexport default function observeRect(\n\tnode: Element,\n\tcb: (rect: DOMRect) => void\n) {\n\treturn {\n\t\tobserve() {\n\t\t\tlet wasEmpty = observedNodes.size === 0;\n\t\t\tif (observedNodes.has(node)) {\n\t\t\t\tobservedNodes.get(node)!.callbacks.push(cb);\n\t\t\t} else {\n\t\t\t\tobservedNodes.set(node, {\n\t\t\t\t\trect: undefined,\n\t\t\t\t\thasRectChanged: false,\n\t\t\t\t\tcallbacks: [cb],\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (wasEmpty) run();\n\t\t},\n\n\t\tunobserve() {\n\t\t\tlet state = observedNodes.get(node);\n\t\t\tif (state) {\n\t\t\t\t// Remove the callback\n\t\t\t\tconst index = state.callbacks.indexOf(cb);\n\t\t\t\tif (index >= 0) state.callbacks.splice(index, 1);\n\n\t\t\t\t// Remove the node reference\n\t\t\t\tif (!state.callbacks.length) observedNodes.delete(node);\n\n\t\t\t\t// Stop the loop\n\t\t\t\tif (!observedNodes.size) cancelAnimationFrame(rafId);\n\t\t\t}\n\t\t},\n\t};\n}\n\nexport type PartialRect = Partial<DOMRect>;\n\nexport type RectProps = {\n\trect: DOMRect | undefined;\n\thasRectChanged: boolean;\n\tcallbacks: Function[];\n};\n"]},"metadata":{},"sourceType":"module"}