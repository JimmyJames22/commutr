{"ast":null,"code":"import { useRef, useState, useCallback, useEffect } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar useLatest = function (val) {\n  var ref = useRef(val);\n  ref.current = val;\n  return ref;\n};\n\nvar _debounce = function (fn, delay) {\n  var timer; // eslint-disable-next-line func-names\n\n  return function () {\n    var _this = this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (timer !== null) {\n      clearTimeout(timer);\n      timer = null;\n    }\n\n    timer = setTimeout(function () {\n      return fn.apply(_this, args);\n    }, delay);\n  };\n};\n\nvar loadApiErr = \"ðŸ’¡ use-places-autocomplete: Google Maps Places API library must be loaded. See: https://github.com/wellyshen/use-places-autocomplete#load-the-library\";\n\nvar usePlacesAutocomplete = function usePlacesAutocomplete(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      requestOptions = _ref.requestOptions,\n      _ref$debounce = _ref.debounce,\n      debounce = _ref$debounce === void 0 ? 200 : _ref$debounce,\n      _ref$cache = _ref.cache,\n      cache = _ref$cache === void 0 ? 24 * 60 * 60 : _ref$cache,\n      _ref$cacheKey = _ref.cacheKey,\n      cacheKey = _ref$cacheKey === void 0 ? \"upa\" : _ref$cacheKey,\n      googleMaps = _ref.googleMaps,\n      callbackName = _ref.callbackName,\n      _ref$defaultValue = _ref.defaultValue,\n      defaultValue = _ref$defaultValue === void 0 ? \"\" : _ref$defaultValue,\n      _ref$initOnMount = _ref.initOnMount,\n      initOnMount = _ref$initOnMount === void 0 ? true : _ref$initOnMount;\n\n  var _useState = useState(false),\n      ready = _useState[0],\n      setReady = _useState[1];\n\n  var _useState2 = useState(defaultValue),\n      value = _useState2[0],\n      setVal = _useState2[1];\n\n  var _useState3 = useState({\n    loading: false,\n    status: \"\",\n    data: []\n  }),\n      suggestions = _useState3[0],\n      setSuggestions = _useState3[1];\n\n  var asRef = useRef();\n  var requestOptionsRef = useLatest(requestOptions);\n  var googleMapsRef = useLatest(googleMaps);\n  var init = useCallback(function () {\n    var _google$maps;\n\n    if (asRef.current) return;\n    var _window = window,\n        google = _window.google;\n    var gMaps = googleMapsRef.current;\n    var placesLib = (gMaps == null ? void 0 : gMaps.places) || (google == null ? void 0 : (_google$maps = google.maps) == null ? void 0 : _google$maps.places);\n\n    if (!placesLib) {\n      console.error(loadApiErr);\n      return;\n    }\n\n    asRef.current = new placesLib.AutocompleteService();\n    setReady(true);\n  }, [googleMapsRef]);\n  var clearSuggestions = useCallback(function () {\n    setSuggestions({\n      loading: false,\n      status: \"\",\n      data: []\n    });\n  }, []);\n  var clearCache = useCallback(function (key) {\n    if (key === void 0) {\n      key = cacheKey;\n    }\n\n    try {\n      sessionStorage.removeItem(key);\n    } catch (error) {// Skip exception\n    }\n  }, [cacheKey]); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  var fetchPredictions = useCallback(_debounce(function (val) {\n    var _asRef$current;\n\n    if (!val) {\n      clearSuggestions();\n      return;\n    }\n\n    setSuggestions(function (prevState) {\n      return _extends({}, prevState, {\n        loading: true\n      });\n    });\n    var cachedData = {};\n\n    try {\n      cachedData = JSON.parse(sessionStorage.getItem(cacheKey) || \"{}\");\n    } catch (error) {// Skip exception\n    }\n\n    if (cache) {\n      cachedData = Object.keys(cachedData).reduce(function (acc, key) {\n        if (cachedData[key].maxAge - Date.now() >= 0) acc[key] = cachedData[key];\n        return acc;\n      }, {});\n\n      if (cachedData[val]) {\n        setSuggestions({\n          loading: false,\n          status: \"OK\",\n          data: cachedData[val].data\n        });\n        return;\n      }\n    }\n\n    (_asRef$current = asRef.current) == null ? void 0 : _asRef$current.getPlacePredictions(_extends({}, requestOptionsRef.current, {\n      input: val\n    }), function (data, status) {\n      setSuggestions({\n        loading: false,\n        status: status,\n        data: data || []\n      });\n\n      if (cache && status === \"OK\") {\n        cachedData[val] = {\n          data: data,\n          maxAge: Date.now() + cache * 1000\n        };\n\n        try {\n          sessionStorage.setItem(cacheKey, JSON.stringify(cachedData));\n        } catch (error) {// Skip exception\n        }\n      }\n    });\n  }, debounce), [cache, cacheKey, clearSuggestions, requestOptionsRef]);\n  var setValue = useCallback(function (val, shouldFetchData) {\n    if (shouldFetchData === void 0) {\n      shouldFetchData = true;\n    }\n\n    setVal(val);\n    if (asRef.current && shouldFetchData) fetchPredictions(val);\n  }, [fetchPredictions]);\n  useEffect(function () {\n    if (!initOnMount) return function () {\n      return null;\n    };\n    var _window2 = window,\n        google = _window2.google;\n\n    if (!googleMapsRef.current && !(google != null && google.maps) && callbackName) {\n      window[callbackName] = init;\n    } else {\n      init();\n    }\n\n    return function () {\n      // @ts-ignore\n      if (window[callbackName]) delete window[callbackName];\n    };\n  }, [callbackName, googleMapsRef, init, initOnMount]);\n  return {\n    ready: ready,\n    value: value,\n    suggestions: suggestions,\n    setValue: setValue,\n    clearSuggestions: clearSuggestions,\n    clearCache: clearCache,\n    init: init\n  };\n};\n/* eslint-disable compat/compat */\n\n\nvar geocodeErr = \"ðŸ’¡ use-places-autocomplete: Please provide an address when using getGeocode() with the componentRestrictions.\";\n\nvar getGeocode = function getGeocode(args) {\n  var geocoder = new window.google.maps.Geocoder();\n  return new Promise(function (resolve, reject) {\n    geocoder.geocode(args, function (results, status) {\n      if (status !== \"OK\") reject(status);\n\n      if (!args.address && args.componentRestrictions) {\n        console.error(geocodeErr);\n        resolve(results);\n      }\n\n      resolve(results);\n    });\n  });\n};\n\nvar getLatLng = function getLatLng(result) {\n  var _result$geometry$loca = result.geometry.location,\n      lat = _result$geometry$loca.lat,\n      lng = _result$geometry$loca.lng;\n  return {\n    lat: lat(),\n    lng: lng()\n  };\n};\n\nvar getZipCode = function getZipCode(result, useShortName) {\n  var foundZip = result.address_components.find(function (_ref) {\n    var types = _ref.types;\n    return types.includes(\"postal_code\");\n  });\n  if (!foundZip) return undefined;\n  return useShortName ? foundZip.short_name : foundZip.long_name;\n};\n\nvar getDetailsErr = \"ðŸ’¡ use-places-autocomplete: Please provide a place Id when using getDetails() either as a string or as part of an Autocomplete Prediction.\";\n\nvar getDetails = function getDetails(args) {\n  var PlacesService = new window.google.maps.places.PlacesService(document.createElement(\"div\"));\n\n  if (!args.placeId) {\n    console.error(getDetailsErr);\n    return Promise.reject(getDetailsErr);\n  }\n\n  return new Promise(function (resolve, reject) {\n    PlacesService.getDetails(args, function (results, status) {\n      if (status !== \"OK\") reject(status);\n      resolve(results);\n    });\n  });\n};\n\nexport { usePlacesAutocomplete as default, getDetails, getGeocode, getLatLng, getZipCode };","map":{"version":3,"mappings":"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","names":["val","ref","useRef","current","fn","delay","timer","args","arguments","clearTimeout","setTimeout","apply","_this","loadApiErr","usePlacesAutocomplete","_temp","requestOptions","debounce","cache","cacheKey","googleMaps","callbackName","defaultValue","initOnMount","useState","ready","setReady","value","setVal","loading","status","data","suggestions","setSuggestions","asRef","requestOptionsRef","useLatest","googleMapsRef","init","useCallback","window","google","gMaps","placesLib","places","maps","_google$maps","console","error","AutocompleteService","clearSuggestions","clearCache","key","sessionStorage","removeItem","fetchPredictions","_debounce","prevState","cachedData","JSON","parse","getItem","Object","keys","reduce","acc","maxAge","Date","now","getPlacePredictions","input","setItem","stringify","setValue","shouldFetchData","useEffect","geocodeErr","getGeocode","geocoder","Geocoder","Promise","resolve","reject","geocode","results","address","componentRestrictions","getLatLng","result","geometry","location","lat","lng","getZipCode","useShortName","foundZip","address_components","find","types","includes","undefined","short_name","long_name","getDetailsErr","getDetails","PlacesService","document","createElement","placeId"],"sources":["/Users/gunner/Documents/GitHub/commutr-main/commutr/frontend/node_modules/use-places-autocomplete/src/useLatest.ts","/Users/gunner/Documents/GitHub/commutr-main/commutr/frontend/node_modules/use-places-autocomplete/src/debounce.ts","/Users/gunner/Documents/GitHub/commutr-main/commutr/frontend/node_modules/use-places-autocomplete/src/usePlacesAutocomplete.ts","/Users/gunner/Documents/GitHub/commutr-main/commutr/frontend/node_modules/use-places-autocomplete/src/utils.ts"],"sourcesContent":["import { RefObject, useRef } from \"react\";\n\nexport default <T>(val: T): RefObject<T> => {\n  const ref = useRef(val);\n  ref.current = val;\n  return ref;\n};\n","export default <F extends (...args: any[]) => void>(\n  fn: F,\n  delay: number\n): ((this: ThisParameterType<F>, ...args: Parameters<F>) => void) => {\n  let timer: ReturnType<typeof setTimeout> | null;\n\n  // eslint-disable-next-line func-names\n  return function (this: ThisParameterType<F>, ...args: Parameters<F>) {\n    if (timer !== null) {\n      clearTimeout(timer);\n      timer = null;\n    }\n\n    timer = setTimeout(() => fn.apply(this, args), delay);\n  };\n};\n","import { useState, useRef, useCallback, useEffect } from \"react\";\n\nimport useLatest from \"./useLatest\";\nimport _debounce from \"./debounce\";\n\nexport interface HookArgs {\n  requestOptions?: Omit<google.maps.places.AutocompletionRequest, \"input\">;\n  debounce?: number;\n  cache?: number | false;\n  cacheKey?: string;\n  googleMaps?: any;\n  callbackName?: string;\n  defaultValue?: string;\n  initOnMount?: boolean;\n}\n\ntype Suggestion = google.maps.places.AutocompletePrediction;\n\ntype Status = `${google.maps.places.PlacesServiceStatus}` | \"\";\n\ninterface Suggestions {\n  readonly loading: boolean;\n  readonly status: Status;\n  data: Suggestion[];\n}\n\ninterface SetValue {\n  (val: string, shouldFetchData?: boolean): void;\n}\n\ninterface HookReturn {\n  ready: boolean;\n  value: string;\n  suggestions: Suggestions;\n  setValue: SetValue;\n  clearSuggestions: () => void;\n  clearCache: (key?: string) => void;\n  init: () => void;\n}\n\nexport const loadApiErr =\n  \"ðŸ’¡ use-places-autocomplete: Google Maps Places API library must be loaded. See: https://github.com/wellyshen/use-places-autocomplete#load-the-library\";\n\nconst usePlacesAutocomplete = ({\n  requestOptions,\n  debounce = 200,\n  cache = 24 * 60 * 60,\n  cacheKey = \"upa\",\n  googleMaps,\n  callbackName,\n  defaultValue = \"\",\n  initOnMount = true,\n}: HookArgs = {}): HookReturn => {\n  const [ready, setReady] = useState(false);\n  const [value, setVal] = useState(defaultValue);\n  const [suggestions, setSuggestions] = useState<Suggestions>({\n    loading: false,\n    status: \"\",\n    data: [],\n  });\n  const asRef = useRef<google.maps.places.AutocompleteService>();\n  const requestOptionsRef = useLatest(requestOptions);\n  const googleMapsRef = useLatest(googleMaps);\n\n  const init = useCallback(() => {\n    if (asRef.current) return;\n\n    const { google } = window;\n    const { current: gMaps } = googleMapsRef;\n    const placesLib = gMaps?.places || google?.maps?.places;\n\n    if (!placesLib) {\n      console.error(loadApiErr);\n      return;\n    }\n\n    asRef.current = new placesLib.AutocompleteService();\n    setReady(true);\n  }, [googleMapsRef]);\n\n  const clearSuggestions = useCallback(() => {\n    setSuggestions({ loading: false, status: \"\", data: [] });\n  }, []);\n\n  const clearCache = useCallback(\n    (key = cacheKey) => {\n      try {\n        sessionStorage.removeItem(key);\n      } catch (error) {\n        // Skip exception\n      }\n    },\n    [cacheKey]\n  );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const fetchPredictions = useCallback(\n    _debounce((val: string) => {\n      if (!val) {\n        clearSuggestions();\n        return;\n      }\n\n      setSuggestions((prevState) => ({ ...prevState, loading: true }));\n\n      let cachedData: Record<string, { data: Suggestion[]; maxAge: number }> =\n        {};\n\n      try {\n        cachedData = JSON.parse(sessionStorage.getItem(cacheKey) || \"{}\");\n      } catch (error) {\n        // Skip exception\n      }\n\n      if (cache) {\n        cachedData = Object.keys(cachedData).reduce(\n          (acc: typeof cachedData, key) => {\n            if (cachedData[key].maxAge - Date.now() >= 0)\n              acc[key] = cachedData[key];\n            return acc;\n          },\n          {}\n        );\n\n        if (cachedData[val]) {\n          setSuggestions({\n            loading: false,\n            status: \"OK\",\n            data: cachedData[val].data,\n          });\n          return;\n        }\n      }\n\n      asRef.current?.getPlacePredictions(\n        { ...requestOptionsRef.current, input: val },\n        (data: Suggestion[] | null, status: Status) => {\n          setSuggestions({ loading: false, status, data: data || [] });\n\n          if (cache && status === \"OK\") {\n            cachedData[val] = {\n              data: data as Suggestion[],\n              maxAge: Date.now() + cache * 1000,\n            };\n\n            try {\n              sessionStorage.setItem(cacheKey, JSON.stringify(cachedData));\n            } catch (error) {\n              // Skip exception\n            }\n          }\n        }\n      );\n    }, debounce),\n    [cache, cacheKey, clearSuggestions, requestOptionsRef]\n  );\n\n  const setValue: SetValue = useCallback(\n    (val, shouldFetchData = true) => {\n      setVal(val);\n      if (asRef.current && shouldFetchData) fetchPredictions(val);\n    },\n    [fetchPredictions]\n  );\n\n  useEffect(() => {\n    if (!initOnMount) return () => null;\n\n    const { google } = window;\n\n    if (!googleMapsRef.current && !google?.maps && callbackName) {\n      (window as any)[callbackName] = init;\n    } else {\n      init();\n    }\n\n    return () => {\n      // @ts-ignore\n      if ((window as any)[callbackName]) delete (window as any)[callbackName];\n    };\n  }, [callbackName, googleMapsRef, init, initOnMount]);\n\n  return {\n    ready,\n    value,\n    suggestions,\n    setValue,\n    clearSuggestions,\n    clearCache,\n    init,\n  };\n};\n\nexport default usePlacesAutocomplete;\n","/* eslint-disable compat/compat */\n\ntype GeoArgs = google.maps.GeocoderRequest;\n\ntype GeocodeResult = google.maps.GeocoderResult;\n\ntype GeoReturn = Promise<GeocodeResult[]>;\n\nexport const geocodeErr =\n  \"ðŸ’¡ use-places-autocomplete: Please provide an address when using getGeocode() with the componentRestrictions.\";\n\nexport const getGeocode = (args: GeoArgs): GeoReturn => {\n  const geocoder = new window.google.maps.Geocoder();\n\n  return new Promise((resolve, reject) => {\n    geocoder.geocode(args, (results, status) => {\n      if (status !== \"OK\") reject(status);\n      if (!args.address && args.componentRestrictions) {\n        console.error(geocodeErr);\n        resolve(results);\n      }\n      resolve(results);\n    });\n  });\n};\n\ntype LatLng = { lat: number; lng: number };\n\nexport const getLatLng = (result: GeocodeResult): LatLng => {\n  const { lat, lng } = result.geometry.location;\n  return { lat: lat(), lng: lng() };\n};\n\ntype ZipCode = string | undefined;\n\nexport const getZipCode = (\n  result: GeocodeResult,\n  useShortName: false\n): ZipCode => {\n  const foundZip = result.address_components.find(({ types }) =>\n    types.includes(\"postal_code\")\n  );\n\n  if (!foundZip) return undefined;\n\n  return useShortName ? foundZip.short_name : foundZip.long_name;\n};\n\ntype GetDetailsArgs = google.maps.places.PlaceDetailsRequest;\n\ntype DetailsResult = Promise<google.maps.places.PlaceResult | string>;\n\nexport const getDetailsErr =\n  \"ðŸ’¡ use-places-autocomplete: Please provide a place Id when using getDetails() either as a string or as part of an Autocomplete Prediction.\";\n\nexport const getDetails = (args: GetDetailsArgs): DetailsResult => {\n  const PlacesService = new window.google.maps.places.PlacesService(\n    document.createElement(\"div\")\n  );\n\n  if (!args.placeId) {\n    console.error(getDetailsErr);\n    return Promise.reject(getDetailsErr);\n  }\n\n  return new Promise((resolve, reject) => {\n    PlacesService.getDetails(args, (results, status) => {\n      if (status !== \"OK\") reject(status);\n      resolve(results);\n    });\n  });\n};\n"]},"metadata":{},"sourceType":"module"}